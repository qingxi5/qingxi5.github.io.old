<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web框架培训</title>
      <link href="/posts/e3e00517.html"/>
      <url>/posts/e3e00517.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-体系"><a href="#1-1-体系" class="headerlink" title="1.1 体系"></a>1.1 体系</h3><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/qingxi5/typora/raw/master/img/20210519115253.png" alt="image-20210519115252919" style="zoom:50%;"><h2 id="二、RIA开发套件"><a href="#二、RIA开发套件" class="headerlink" title="二、RIA开发套件"></a>二、RIA开发套件</h2><h3 id="2-1-架构图"><a href="#2-1-架构图" class="headerlink" title="2.1 架构图"></a>2.1 架构图</h3><h3 id="2-2-优点"><a href="#2-2-优点" class="headerlink" title="2.2 优点"></a>2.2 优点</h3><h3 id="2-3-页面编辑器"><a href="#2-3-页面编辑器" class="headerlink" title="2.3 页面编辑器"></a>2.3 页面编辑器</h3><h3 id="2-4-属性编辑器"><a href="#2-4-属性编辑器" class="headerlink" title="2.4 属性编辑器"></a>2.4 属性编辑器</h3><h3 id="2-5-JS编辑器"><a href="#2-5-JS编辑器" class="headerlink" title="2.5 JS编辑器"></a>2.5 JS编辑器</h3><h3 id="2-6-WEB构件库"><a href="#2-6-WEB构件库" class="headerlink" title="2.6 WEB构件库"></a>2.6 WEB构件库</h3><h2 id="三、开发规范"><a href="#三、开发规范" class="headerlink" title="三、开发规范"></a>三、开发规范</h2><p>一些前端规范</p><h2 id="四、文档库"><a href="#四、文档库" class="headerlink" title="四、文档库"></a>四、文档库</h2><p>一些API文档</p><h2 id="五、开发技巧"><a href="#五、开发技巧" class="headerlink" title="五、开发技巧"></a>五、开发技巧</h2><h2 id="六、技术规范"><a href="#六、技术规范" class="headerlink" title="六、技术规范"></a>六、技术规范</h2><h3 id="6-1-JavaScript规范"><a href="#6-1-JavaScript规范" class="headerlink" title="6.1 JavaScript规范"></a>6.1 JavaScript规范</h3><p>6.2 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>核心框架</title>
      <link href="/posts/e3e00516.html"/>
      <url>/posts/e3e00516.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、开发环境"><a href="#一、开发环境" class="headerlink" title="一、开发环境"></a>一、开发环境</h2><h2 id="二、编码规范"><a href="#二、编码规范" class="headerlink" title="二、编码规范"></a>二、编码规范</h2><h2 id="三、配置文件"><a href="#三、配置文件" class="headerlink" title="三、配置文件"></a>三、配置文件</h2><h3 id="3-1-sword-xml"><a href="#3-1-sword-xml" class="headerlink" title="3.1 sword.xml"></a>3.1 sword.xml</h3><h2 id="四、持久层组件"><a href="#四、持久层组件" class="headerlink" title="四、持久层组件"></a>四、持久层组件</h2><h3 id="4-1-基本过程"><a href="#4-1-基本过程" class="headerlink" title="4.1 基本过程"></a>4.1 基本过程</h3><pre><code>1.引入持久层需要的jar包2.在sword.xml文件中启动持久层组件3.配置数据源（datasource.xml）4.编写sql配置文件（sql-*），此文件为可选项；5.编写PO（Persisent Object）实现业务功能和业务描述；6.使用IPersistenceService对象对PO执行持久化操作</code></pre><h3 id="4-2-配置文件"><a href="#4-2-配置文件" class="headerlink" title="4.2 配置文件"></a>4.2 配置文件</h3><h3 id="4-3-持久层API"><a href="#4-3-持久层API" class="headerlink" title="4.3 持久层API"></a>4.3 持久层API</h3><h4 id="4-3-1-获取默认数据源"><a href="#4-3-1-获取默认数据源" class="headerlink" title="4.3.1 获取默认数据源"></a>4.3.1 获取默认数据源</h4><pre><code>1）直接调用接口方法：SwordPersistenceUtils.getPersistenceService()2）如果在自己的service里调用持久层，首先继承BizBaseService类，然后调用this.getPersistenceService获得持久化服务。</code></pre><h4 id="4-3-2-获取其他数据源"><a href="#4-3-2-获取其他数据源" class="headerlink" title="4.3.2 获取其他数据源"></a>4.3.2 获取其他数据源</h4><pre><code>使用其他数据源时，需要在配置文件datasource.xml中配置数据源名称</code></pre><h4 id="4-3-3-获取数据源"><a href="#4-3-3-获取数据源" class="headerlink" title="4.3.3 获取数据源"></a>4.3.3 获取数据源</h4><pre><code>ISwordDataSource getDataSource(String datasource)</code></pre><h4 id="4-3-4-获取SQL管理器"><a href="#4-3-4-获取SQL管理器" class="headerlink" title="4.3.4 获取SQL管理器"></a>4.3.4 获取SQL管理器</h4><pre><code>ISwordSQLManager getSQLManager()该静态方法会通过注册的持久层组件获取SQL管理器对象，它首先会进行调用安全性以及持久层组件启动状态等一系列组件检查操作 ，然后返回该SQL管理器对象，通过该对象可以完成SQL加载、更新等一系列基本操作，实现对平台SQL的集中管理。</code></pre><h4 id="4-3-5-查询API"><a href="#4-3-5-查询API" class="headerlink" title="4.3.5 查询API"></a>4.3.5 查询API</h4><pre><code>数据更新包括数据的insert、update和delete等操作。</code></pre><h4 id="4-3-6-更新API"><a href="#4-3-6-更新API" class="headerlink" title="4.3.6 更新API"></a>4.3.6 更新API</h4><h4 id="4-3-7-存储过程API"><a href="#4-3-7-存储过程API" class="headerlink" title="4.3.7 存储过程API"></a>4.3.7 存储过程API</h4><h2 id="五、工具类组件"><a href="#五、工具类组件" class="headerlink" title="五、工具类组件"></a>五、工具类组件</h2><h3 id="5-1-字符串处理工具类"><a href="#5-1-字符串处理工具类" class="headerlink" title="5.1 字符串处理工具类"></a>5.1 字符串处理工具类</h3><h3 id="5-2-数学计算工具类"><a href="#5-2-数学计算工具类" class="headerlink" title="5.2 数学计算工具类"></a>5.2 数学计算工具类</h3><h3 id="5-3-邮件发送工具类"><a href="#5-3-邮件发送工具类" class="headerlink" title="5.3 邮件发送工具类"></a>5.3 邮件发送工具类</h3><h3 id="5-4-日期工具类组件"><a href="#5-4-日期工具类组件" class="headerlink" title="5.4 日期工具类组件"></a>5.4 日期工具类组件</h3><h3 id="5-5-文件工具组件"><a href="#5-5-文件工具组件" class="headerlink" title="5.5 文件工具组件"></a>5.5 文件工具组件</h3><h3 id="5-6-会话工具组件"><a href="#5-6-会话工具组件" class="headerlink" title="5.6 会话工具组件"></a>5.6 会话工具组件</h3><h2 id="六、缓存组件"><a href="#六、缓存组件" class="headerlink" title="六、缓存组件"></a>六、缓存组件</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><h4 id="6-1-1-功能"><a href="#6-1-1-功能" class="headerlink" title="6.1.1 功能"></a>6.1.1 功能</h4><p>缓存分类：本地缓存、集群缓存</p><pre><code>本地缓存：缓存数据在本地集群缓存: 缓存数据在集群缓存服务器</code></pre><h4 id="6-1-2-组件管理器"><a href="#6-1-2-组件管理器" class="headerlink" title="6.1.2 组件管理器"></a>6.1.2 组件管理器</h4><pre><code>多级缓存组件采用统一的组件管理器com.css.sword.multiLevelCache.SwordCacheComponentManager，需要在sword.xml中缓存组件的component属性中设置该值。他负责多级缓存相关配置信息的加载、初始化和启用多级缓存主管理器。</code></pre><pre><code>多级缓存主管理器：SwordCacheMasterManager，用于管理系统中所有缓存的信息，统一缓存管理入口。缓存管理器IswordCacheManager：此接口用于规范缓存管理器的基本功能。</code></pre><h4 id="6-1-3-缓存数据管理器"><a href="#6-1-3-缓存数据管理器" class="headerlink" title="6.1.3 缓存数据管理器"></a>6.1.3 缓存数据管理器</h4><pre><code>此组件管理器用于统一管理各个缓存组件的数据管理器，用于管理各缓存组件的数据加载。</code></pre><h4 id="6-1-4-使用多级缓存组件基本过程"><a href="#6-1-4-使用多级缓存组件基本过程" class="headerlink" title="6.1.4 使用多级缓存组件基本过程"></a>6.1.4 使用多级缓存组件基本过程</h4><pre><code>缓存的基本开发过程如下：1.引入缓存需要的jar包2.在sword.xml文件中启动缓存组件3.配置cache-config.xml4.如果为本地缓存，需要引入持久层相关配置5.数据库设计（可选）6.使用SwordCacheUtils类操作缓存</code></pre><h3 id="6-2-配置文件"><a href="#6-2-配置文件" class="headerlink" title="6.2 配置文件"></a>6.2 配置文件</h3><h3 id="6-3-缓存相关API"><a href="#6-3-缓存相关API" class="headerlink" title="6.3 缓存相关API"></a>6.3 缓存相关API</h3><h4 id="6-3-1-获得缓存相关数据"><a href="#6-3-1-获得缓存相关数据" class="headerlink" title="6.3.1 获得缓存相关数据"></a>6.3.1 获得缓存相关数据</h4><pre><code>如果在系统表中已经注册了业务代码表，想要在java代码中获得业务代码表缓存池的内容，可以使用com.css.sword.kernel.utils.SwordCacheUtils类中的方法。</code></pre><h4 id="6-3-2-缓存池注册与注销"><a href="#6-3-2-缓存池注册与注销" class="headerlink" title="6.3.2 缓存池注册与注销"></a>6.3.2 缓存池注册与注销</h4><pre><code>我们也可以自己定义缓存的内容，将我们需要缓存的数据放在缓存中。所有的操作都定义在com.css.sword.kernel.utils.SwordCacheUtils中。</code></pre><h4 id="6-3-3-K-V缓存加载数据"><a href="#6-3-3-K-V缓存加载数据" class="headerlink" title="6.3.3 K/V缓存加载数据"></a>6.3.3 K/V缓存加载数据</h4><h4 id="6-3-4-K-V数据清理"><a href="#6-3-4-K-V数据清理" class="headerlink" title="6.3.4 K/V数据清理"></a>6.3.4 K/V数据清理</h4><h4 id="6-3-5-获取版本信息"><a href="#6-3-5-获取版本信息" class="headerlink" title="6.3.5 获取版本信息"></a>6.3.5 获取版本信息</h4><h2 id="七、服务总线组件"><a href="#七、服务总线组件" class="headerlink" title="七、服务总线组件"></a>七、服务总线组件</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><pre><code>服务总线组件是平台内(本地JVM)服务管理与调用的核心组件；是平台启动时内置的服务类扫描器, 扫描服务容器内的服务, 并执行注册与服务代理类代码的生成.服务的调用按服务位置可分为本地服务调用与远程服务调用。按调用方式可分为同步调用和异步调用.</code></pre><h3 id="7-2-代码示例"><a href="#7-2-代码示例" class="headerlink" title="7.2 代码示例"></a>7.2 代码示例</h3><pre><code>要求服务类有明确的注解代码: @ServiceContainer, @Servicecom.css.sword.kernel.base.annotation.@ServiceContainer服务容器类注解: 标注此类内有@Servicecom.css.sword.kernel.base.annotation.@Servcie服务注解: 标注此方法为服务方法</code></pre><h4 id="7-2-1-ServiceContainer"><a href="#7-2-1-ServiceContainer" class="headerlink" title="7.2.1 @ServiceContainer"></a>7.2.1 @ServiceContainer</h4><pre><code>标注此类为服务容器类, 只有此注解的类才能被服务管理器组件扫描注册服务。</code></pre><h4 id="7-2-2-Service"><a href="#7-2-2-Service" class="headerlink" title="7.2.2 @Service"></a>7.2.2 @Service</h4><pre><code>标注此方法为服务, 服务管理器将为此方法生成服务代理类并注册为服务。</code></pre><h3 id="7-3-服务调用"><a href="#7-3-服务调用" class="headerlink" title="7.3 服务调用"></a>7.3 服务调用</h3><pre><code>服务的调用统一使用com.css.sword.kernel.utils.SwordServiceUtils工具类提供的接口调用.服务调用可分为本地服务调用与远程服务调用, 调用方式可以有同步调用与异步调用.SwordServiceUtils工具类提供不同的接口以支持不同的调用方式.</code></pre><h4 id="7-3-1-callLocalService"><a href="#7-3-1-callLocalService" class="headerlink" title="7.3.1 callLocalService"></a>7.3.1 callLocalService</h4><pre><code>明确的本地服务调用.此种调用方式不会进行交易路由，即只会查找本地的服务注册表，并调用服务.</code></pre><h4 id="7-3-2-callService"><a href="#7-3-2-callService" class="headerlink" title="7.3.2 callService"></a>7.3.2 callService</h4><pre><code>callService(String, Object...)标准服务调用方式.此种服务调用方式会先进行远程服务路由表查找，并根据远程服务路由表的配置信息在远程服务调用或在本地服务调用间自动切换, 但是被调用服务无论是远程服务还是本地服务都会在开发态下启动参数和返回结果的序列化检查，以保证此方法可以成功放在远程执行</code></pre><h2 id="八、DEPO生成器"><a href="#八、DEPO生成器" class="headerlink" title="八、DEPO生成器"></a>八、DEPO生成器</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><pre><code>1. 名词解释：DE：Data Element 数据元, 对应一个字段PO：Persistence Object 持久层对象，对应数据库一张表2. 准备工作：数据元配置表data_element_config</code></pre><h3 id="8-2-基本使用"><a href="#8-2-基本使用" class="headerlink" title="8.2 基本使用"></a>8.2 基本使用</h3><h4 id="8-2-1-概念"><a href="#8-2-1-概念" class="headerlink" title="8.2.1 概念"></a>8.2.1 概念</h4><pre><code>DE和PO生成器工具类分别为DEClassFileGenerater和POClassFileGenerator.</code></pre><h4 id="8-2-2-配置数据源"><a href="#8-2-2-配置数据源" class="headerlink" title="8.2.2 配置数据源"></a>8.2.2 配置数据源</h4><pre><code>配置持久层组件在sword.xml组件配置中添加持久层组件</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/qingxi5/typora/raw/master/img/20210518191214.png" alt="image-20210518191214305"></p><pre><code>配置数据源datasource.xml配置数据源</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/qingxi5/typora/raw/master/img/20210518191225.png" alt="image-20210518191225817"></p><h4 id="8-2-3-DE生成器"><a href="#8-2-3-DE生成器" class="headerlink" title="8.2.3 DE生成器"></a>8.2.3 DE生成器</h4><p>1、数据源配置表：</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://gitee.com/qingxi5/typora/raw/master/img/20210518191359.png" alt="image-20210518191359725"></p><p>2、DE生成：</p><pre><code>默认按表data_element_config生成所有DE.所有配置都准备完成后, 直接运行DEClassFileGenerater 类即可生成DE.</code></pre><pre><code>可配置项：默认DE文件包路径前缀为com.css.sword.dataDictionary.dataElement + DE_GROUP如果要更改com.css.sword.dataDictionary.dataElement部分,则可添加参数-DrootPackage=a.b.crootPath默认DE文件生成在工程同级目录BussineseDataDictionary内(没有的话会自动创建)修改此配置: -DrootPath=path</code></pre><h4 id="8-2-4-PO生成器"><a href="#8-2-4-PO生成器" class="headerlink" title="8.2.4 PO生成器"></a>8.2.4 PO生成器</h4><h3 id="8-3-基于数据元管理工具工程生成DEPO"><a href="#8-3-基于数据元管理工具工程生成DEPO" class="headerlink" title="8.3 基于数据元管理工具工程生成DEPO"></a>8.3 基于数据元管理工具工程生成DEPO</h3><h4 id="8-3-1-配置SJMXDEPO工程"><a href="#8-3-1-配置SJMXDEPO工程" class="headerlink" title="8.3.1 配置SJMXDEPO工程"></a>8.3.1 配置SJMXDEPO工程</h4><h4 id="8-3-2-修改datasource-xml数据源"><a href="#8-3-2-修改datasource-xml数据源" class="headerlink" title="8.3.2 修改datasource.xml数据源"></a>8.3.2 修改datasource.xml数据源</h4><h4 id="8-3-3-修改SjmxDEPOService服务"><a href="#8-3-3-修改SjmxDEPOService服务" class="headerlink" title="8.3.3 修改SjmxDEPOService服务"></a>8.3.3 修改SjmxDEPOService服务</h4><pre><code>SjmxDEPOServiceGenDE服务负责连到配置数据源，读取data_element_config表，生成DE，其中生成哪些DE可在程序中配置。</code></pre><pre><code>SjmxDEPOServiceGenPO服务负责链接到配置数据源，根据指定用户下的表生成对应PO，其中生成哪个表的PO可在程序中配置。</code></pre><h2 id="九、日志异常组件"><a href="#九、日志异常组件" class="headerlink" title="九、日志异常组件"></a>九、日志异常组件</h2><h3 id="9-1-日志"><a href="#9-1-日志" class="headerlink" title="9.1 日志"></a>9.1 日志</h3><h4 id="9-1-1-开发基本过程"><a href="#9-1-1-开发基本过程" class="headerlink" title="9.1.1 开发基本过程"></a>9.1.1 开发基本过程</h4><pre><code>基于sword框架，日志模块的基本开发过程如下：引入日志组件需要的jar包修改log4j.xml内容，把log4j.xml放入项目的classpath下</code></pre><h4 id="9-1-2-配置文件说明"><a href="#9-1-2-配置文件说明" class="headerlink" title="9.1.2 配置文件说明"></a>9.1.2 配置文件说明</h4><pre><code>业务系统文件日志输出器工作流文件日志输出器控制台日志输出器</code></pre><h4 id="9-1-3-后台编码规则和示例"><a href="#9-1-3-后台编码规则和示例" class="headerlink" title="9.1.3 后台编码规则和示例"></a>9.1.3 后台编码规则和示例</h4><pre><code>1.在类中，通过SwordLogUtils类的getLogger( )方法，创建SwordLogger日志处理对象实例。2.在业务方法中，通过日志处理对象输出日志信息。相关方法参见日志服务的API。</code></pre><pre><code>日志组件的配置：通过对日志服务配置文件log4j.xml的修改，可以控制日志信息的输出策略。目前本平台使用的是Apache的Log4j去实现日志的输出，系统管理员可参考其使用手册配置需要的输出策略。</code></pre><h3 id="9-2-异常"><a href="#9-2-异常" class="headerlink" title="9.2 异常"></a>9.2 异常</h3><h4 id="9-2-1-开发基本过程"><a href="#9-2-1-开发基本过程" class="headerlink" title="9.2.1 开发基本过程"></a>9.2.1 开发基本过程</h4><pre><code>1.sword-Kernel-*.jar：持久层组件包，*代表版本号2.根据需要修改sword.xml中的异常过滤配置部分3.编写exception-*.properties文件</code></pre><h4 id="9-2-2-配置文件"><a href="#9-2-2-配置文件" class="headerlink" title="9.2.2 配置文件"></a>9.2.2 配置文件</h4><h4 id="9-2-3-后台编码规则和示例"><a href="#9-2-3-后台编码规则和示例" class="headerlink" title="9.2.3 后台编码规则和示例"></a>9.2.3 后台编码规则和示例</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>在exception<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">.</span>properties属性文件中定义异常代码，例如<span class="token operator">:</span>_1019900000001<span class="token number">2</span><span class="token punctuation">.</span>在业务方法中根据需要处理异常，并指定异常编码<span class="token number">3</span><span class="token punctuation">.</span>在异常信息配置文件中加入相应的带有参数的异常信息<span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//业务方法</span>     ……<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"sword"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SwordBaseCheckedException swordBaseCheckedException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SwordBaseCheckedException</span><span class="token punctuation">(</span><span class="token string">"_1019900000001"</span><span class="token punctuation">,</span>parameters<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十、单元测试"><a href="#十、单元测试" class="headerlink" title="十、单元测试"></a>十、单元测试</h2><h2 id="十一、异常说明"><a href="#十一、异常说明" class="headerlink" title="十一、异常说明"></a>十一、异常说明</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
